import numpy as np
import pandas as pd

def percentage():
    
    df = pd.read_csv('readonly/fraud_data.csv')
    per=len(df[df['Class']==1])/len(df)
    return per   # percentage of the observations in the dataset that are instances of fraud

percentage()


from sklearn.model_selection import train_test_split

df = pd.read_csv('readonly/fraud_data.csv')

X = df.iloc[:,:-1]
y = df.iloc[:,-1]

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)


def dummy():
    from sklearn.dummy import DummyClassifier
    from sklearn.metrics import recall_score,accuracy_score
    
    dummy_majority = DummyClassifier(strategy = 'most_frequent').fit(X_train, y_train)
    y_dummy_predicted = dummy_majority.predict(X_test)
    
    accuracy = accuracy_score(y_test, y_dummy_predicted)
    recall = recall_score(y_test, y_dummy_predicted)
    
    return (accuracy, recall)

dummy()


def train_svc():
    from sklearn.metrics import recall_score, precision_score, accuracy_score
    from sklearn.svm import SVC
    
    clf=SVC().fit(X_train, y_train)
    y_predicted=clf.predict(X_test)
    accuracy = accuracy_score(y_test, y_predicted)
    recall = recall_score(y_test, y_predicted)
    precision = precision_score(y_test, y_predicted)
    
    return (accuracy, recall, precision)

train_svc()


def svm_confusion():
    from sklearn.metrics import confusion_matrix
    from sklearn.svm import SVC

    clf=SVC(C= 1e9, gamma= 1e-07).fit(X_train, y_train)
    y_decision=clf.decision_function(X_test)
    
    y_decision = np.where(y_decision > -220, 1, 0)
    conf_matrix = confusion_matrix(y_test, y_decision)
    
    return conf_matrix

svm_confusion()

def log_reg():
    from sklearn.linear_model import LogisticRegression
    from sklearn.metrics import precision_recall_curve
    from sklearn.metrics import roc_curve, auc
    import matplotlib.pyplot as plt
    
    
    lr = LogisticRegression().fit(X_train, y_train)
    y_proba_lr = lr.fit(X_train, y_train).predict_proba(X_test)
    
    precision, recall, thresholds = precision_recall_curve(y_test, y_proba_lr[0:5424,1])
    
    fpr_lr, tpr_lr, _ = roc_curve(y_test, y_proba_lr[0:5424,1])
    roc_auc_lr = auc(fpr_lr, tpr_lr)
    
    plt.figure()
    plt.plot(precision, recall, label='Precision-Recall Curve')
    plt.xlabel('Precision', fontsize=16)
    plt.ylabel('Recall', fontsize=16)
    plt.axes().set_aspect('equal')
    plt.show()
    
    for i, x in enumerate(precision):
        if x==0.75:
            ii=i
    r=recall[ii] 
            
    for k, y in enumerate(fpr_lr):
        if y==0.159618263:
            kk=k   
    tpr=tpr_lr[28]
     
    
    return (r,tpr)

log_reg()
